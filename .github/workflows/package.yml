name: Build and Release Bash Helpers Package

on:
  push:
    tags:
      - 'release-*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Test Modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Make scripts executable
        run: |
          chmod +x lib/*.sh
          chmod +x test*.sh

      - name: Test log module
        run: |
          # Test basic logging functionality
          source lib/log.sh --log-level DEBUG
          log "Test message"
          warn "Test warning"
          error "Test error"
          debug "Test debug"

      - name: Test lifecycle module
        run: |
          # Test lifecycle module loading
          source lib/lifecycle.sh --log-level DEBUG
          echo "Lifecycle module loaded successfully"
          
          # Test with temporary file
          temp_file=$(mktemp)
          echo "Created temp file: $temp_file"
          
          # Cleanup temp file manually for CI
          rm -f "$temp_file"

      - name: Test integration
        run: |
          # Test both modules together
          LOG_LEVEL=DEBUG ./test1.sh

      - name: Validate shell syntax
        run: |
          # Check syntax of all shell files
          for file in lib/*.sh test*.sh; do
            if [ -f "$file" ]; then
              echo "Checking syntax: $file"
              bash -n "$file"
            fi
          done

  package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="dev-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Create package structure
        run: |
          mkdir -p package/bash-helpers-${{ steps.version.outputs.version }}
          
          # Copy library files
          cp -r lib package/bash-helpers-${{ steps.version.outputs.version }}/
          
          # Copy documentation
          cp README.md package/bash-helpers-${{ steps.version.outputs.version }}/
          cp CLAUDE.md package/bash-helpers-${{ steps.version.outputs.version }}/
          
          # Create installation script
          cat > package/bash-helpers-${{ steps.version.outputs.version }}/install.sh << 'EOF'
          #!/usr/bin/env bash
          
          # Bash Helpers Library Installer
          
          set -euo pipefail
          
          INSTALL_DIR="${1:-${HOME}/.local/lib/bash-helpers}"
          
          echo "Installing Bash Helpers Library to: ${INSTALL_DIR}"
          
          # Create installation directory
          mkdir -p "${INSTALL_DIR}"
          
          # Copy library files
          cp -r lib/* "${INSTALL_DIR}/"
          
          # Make files executable
          chmod +x "${INSTALL_DIR}"/*.sh
          
          # Create environment setup script
          cat > "${INSTALL_DIR}/setup.sh" << SETUP_EOF
          #!/usr/bin/env bash
          # Source this file to set up bash-helpers environment
          
          export BASH_HELPERS_DIR="${INSTALL_DIR}"
          
          # Helper function to load modules
          load_bash_helper() {
              local module="\$1"
              shift
              source "\${BASH_HELPERS_DIR}/\${module}.sh" "\$@"
          }
          
          # Example usage:
          # load_bash_helper log --log-level DEBUG
          # load_bash_helper lifecycle --lock-file /tmp/myapp.pid
          SETUP_EOF
          
          chmod +x "${INSTALL_DIR}/setup.sh"
          
          echo ""
          echo "Installation complete!"
          echo ""
          echo "To use in your scripts:"
          echo "  LIB_DIR=\"${INSTALL_DIR}\""
          echo "  source \"\${LIB_DIR}/log.sh\""
          echo "  source \"\${LIB_DIR}/lifecycle.sh\""
          echo ""
          echo "Or source the setup script for helper functions:"
          echo "  source \"${INSTALL_DIR}/setup.sh\""
          echo "  load_bash_helper log --log-level DEBUG"
          echo "  load_bash_helper lifecycle"
          echo ""
          EOF
          
          chmod +x package/bash-helpers-${{ steps.version.outputs.version }}/install.sh

      - name: Create usage examples
        run: |
          mkdir -p package/bash-helpers-${{ steps.version.outputs.version }}/examples
          
          # Create example scripts
          cat > package/bash-helpers-${{ steps.version.outputs.version }}/examples/simple-script.sh << 'EOF'
          #!/usr/bin/env bash
          
          # Example: Simple script with lifecycle management
          
          # Determine library directory
          if [[ -d "lib" ]]; then
              # Running from source directory
              LIB_DIR="lib"
          elif [[ -d "${HOME}/.local/lib/bash-helpers" ]]; then
              # Installed via install.sh
              LIB_DIR="${HOME}/.local/lib/bash-helpers"
          else
              echo "Error: Cannot find bash-helpers library" >&2
              exit 1
          fi
          
          # Load modules
          source "${LIB_DIR}/lifecycle.sh"
          
          # Complete lifecycle setup
          ensure_single_instance
          
          # Create temporary work directory
          work_dir="$(mktemp -d)"
          add_cleanup_item "${work_dir}"
          
          log "Starting work in: ${work_dir}"
          
          # Simulate work
          echo "Processing data..." > "${work_dir}/status.txt"
          sleep 2
          
          log "Work completed successfully"
          
          # Cleanup happens automatically
          EOF
          
          cat > package/bash-helpers-${{ steps.version.outputs.version }}/examples/service-script.sh << 'EOF'
          #!/usr/bin/env bash
          
          # Example: Service script with full lifecycle management
          
          # Determine library directory
          if [[ -d "lib" ]]; then
              LIB_DIR="lib"
          elif [[ -d "${HOME}/.local/lib/bash-helpers" ]]; then
              LIB_DIR="${HOME}/.local/lib/bash-helpers"
          else
              echo "Error: Cannot find bash-helpers library" >&2
              exit 1
          fi
          
          # Load modules with configuration
          source "${LIB_DIR}/log.sh" --log-level INFO
          source "${LIB_DIR}/lifecycle.sh" --lock-file /tmp/example-service.pid
          
          # Service setup
          ensure_single_instance
          
          log "Starting example service..."
          
          # Create runtime directory
          runtime_dir="/tmp/example-service"
          mkdir -p "${runtime_dir}"
          add_cleanup_item "${runtime_dir}"
          
          # Service main loop
          counter=0
          while [[ $counter -lt 10 ]]; do
              log "Service heartbeat #$((++counter))"
              echo "$(date): Heartbeat $counter" >> "${runtime_dir}/activity.log"
              sleep 1
          done
          
          log "Service completed normally"
          EOF
          
          chmod +x package/bash-helpers-${{ steps.version.outputs.version }}/examples/*.sh

      - name: Create package metadata
        run: |
          cat > package/bash-helpers-${{ steps.version.outputs.version }}/VERSION << EOF
          version=${{ steps.version.outputs.version }}
          build_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          git_commit=${GITHUB_SHA}
          git_ref=${GITHUB_REF}
          EOF
          
          # Create package info
          cat > package/bash-helpers-${{ steps.version.outputs.version }}/PACKAGE_INFO.md << 'EOF'
          # Bash Helpers Library Package
          
          This package contains reusable Bash modules for robust script development.
          
          ## Contents
          
          - `lib/` - Core library modules
            - `lifecycle.sh` - Complete script lifecycle management
            - `log.sh` - Enhanced logging system
          - `examples/` - Usage examples
          - `install.sh` - Automated installation script
          - `README.md` - Complete documentation
          
          ## Quick Installation
          
          ```bash
          # Extract package
          tar -xzf bash-helpers-*.tar.gz
          cd bash-helpers-*
          
          # Install to default location (~/.local/lib/bash-helpers)
          ./install.sh
          
          # Or install to custom location
          ./install.sh /opt/bash-helpers
          ```
          
          ## Quick Usage
          
          ```bash
          # In your script
          LIB_DIR="${HOME}/.local/lib/bash-helpers"
          source "${LIB_DIR}/lifecycle.sh"
          
          ensure_single_instance
          log "Script started"
          ```
          
          ## Examples
          
          Run the included examples:
          
          ```bash
          # Simple script example
          ./examples/simple-script.sh
          
          # Service script example
          ./examples/service-script.sh
          ```
          
          See README.md for complete documentation.
          EOF

      - name: Create tarball
        run: |
          cd package
          tar -czf bash-helpers-${{ steps.version.outputs.version }}.tar.gz bash-helpers-${{ steps.version.outputs.version }}/
          
          # Create checksum
          sha256sum bash-helpers-${{ steps.version.outputs.version }}.tar.gz > bash-helpers-${{ steps.version.outputs.version }}.tar.gz.sha256
          
          # Show package contents
          echo "Package contents:"
          tar -tzf bash-helpers-${{ steps.version.outputs.version }}.tar.gz | head -20

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bash-helpers-${{ steps.version.outputs.version }}
          path: |
            package/bash-helpers-${{ steps.version.outputs.version }}.tar.gz
            package/bash-helpers-${{ steps.version.outputs.version }}.tar.gz.sha256
          retention-days: 90

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, package]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: bash-helpers-${{ steps.version.outputs.version }}
          path: ./artifacts

      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          # Bash Helpers Library ${{ steps.version.outputs.version }}
          
          A collection of reusable Bash modules for robust script development.
          
          ## What's Included
          
          - **lifecycle.sh** - Complete script lifecycle management with single-instance enforcement and automatic cleanup
          - **log.sh** - Enhanced logging system with multi-level output and file logging
          - **Examples** - Ready-to-use example scripts
          - **Documentation** - Comprehensive usage guide and API reference
          
          ## Installation
          
          ```bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/bash-helpers-${{ steps.version.outputs.version }}.tar.gz
          tar -xzf bash-helpers-${{ steps.version.outputs.version }}.tar.gz
          cd bash-helpers-${{ steps.version.outputs.version }}
          
          # Install
          ./install.sh
          ```
          
          ## Quick Start
          
          ```bash
          # In your script
          LIB_DIR="${HOME}/.local/lib/bash-helpers"
          source "${LIB_DIR}/lifecycle.sh"
          
          ensure_single_instance
          log "Hello, World!"
          ```
          
          ## Files
          
          - `bash-helpers-${{ steps.version.outputs.version }}.tar.gz` - Main package
          - `bash-helpers-${{ steps.version.outputs.version }}.tar.gz.sha256` - Checksum for verification
          
          ## Verification
          
          ```bash
          sha256sum -c bash-helpers-${{ steps.version.outputs.version }}.tar.gz.sha256
          ```
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Bash Helpers Library ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          files: |
            artifacts/bash-helpers-${{ steps.version.outputs.version }}.tar.gz
            artifacts/bash-helpers-${{ steps.version.outputs.version }}.tar.gz.sha256
          draft: false
          prerelease: false